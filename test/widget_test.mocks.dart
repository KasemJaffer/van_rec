// Mocks generated by Mockito 5.4.2 from annotations
// in van_rec/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:importer/data/data.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:van_rec/data/ds/data_source.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMyEvent_0 extends _i1.SmartFake implements _i2.MyEvent {
  _FakeMyEvent_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataSource extends _i1.Mock implements _i3.DataSource {
  @override
  _i4.Future<List<_i2.MyEvent>> getEvents({
    String? query,
    int? activityId,
    int? centerId,
    DateTime? date,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEvents,
          [],
          {
            #query: query,
            #activityId: activityId,
            #centerId: centerId,
            #date: date,
          },
        ),
        returnValue: _i4.Future<List<_i2.MyEvent>>.value(<_i2.MyEvent>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.MyEvent>>.value(<_i2.MyEvent>[]),
      ) as _i4.Future<List<_i2.MyEvent>>);

  @override
  _i4.Future<_i2.MyEvent> getEvent({
    required int? id,
    required DateTime? start,
    required DateTime? end,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEvent,
          [],
          {
            #id: id,
            #start: start,
            #end: end,
          },
        ),
        returnValue: _i4.Future<_i2.MyEvent>.value(_FakeMyEvent_0(
          this,
          Invocation.method(
            #getEvent,
            [],
            {
              #id: id,
              #start: start,
              #end: end,
            },
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.MyEvent>.value(_FakeMyEvent_0(
          this,
          Invocation.method(
            #getEvent,
            [],
            {
              #id: id,
              #start: start,
              #end: end,
            },
          ),
        )),
      ) as _i4.Future<_i2.MyEvent>);

  @override
  _i4.Future<List<_i2.Activity>> getActivities() => (super.noSuchMethod(
        Invocation.method(
          #getActivities,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Activity>>.value(<_i2.Activity>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.Activity>>.value(<_i2.Activity>[]),
      ) as _i4.Future<List<_i2.Activity>>);

  @override
  _i4.Future<List<_i2.RecCenter>> getCenters() => (super.noSuchMethod(
        Invocation.method(
          #getCenters,
          [],
        ),
        returnValue: _i4.Future<List<_i2.RecCenter>>.value(<_i2.RecCenter>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.RecCenter>>.value(<_i2.RecCenter>[]),
      ) as _i4.Future<List<_i2.RecCenter>>);

  @override
  _i4.Future<List<_i2.CenterActivity>> getCenterActivities() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCenterActivities,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.CenterActivity>>.value(<_i2.CenterActivity>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.CenterActivity>>.value(<_i2.CenterActivity>[]),
      ) as _i4.Future<List<_i2.CenterActivity>>);
}
